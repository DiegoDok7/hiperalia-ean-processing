#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para procesar c√≥digos EAN desde archivo usando GO-UPC API
y generar Excel completo con toda la informaci√≥n
"""

import os
from datetime import datetime
from goupc_automation import (
    leer_codigos_desde_archivo,
    procesar_codigos_goupc,
    procesar_codigos_con_reintentos,
    guardar_excel_goupc,
    guardar_json
)

def main():
    """
    Funci√≥n principal para procesar EANs y generar Excel
    """
    print("üöÄ PROCESAMIENTO DE C√ìDIGOS EAN CON GO-UPC + IA")
    print("=" * 60)
    
    # Configuraci√≥n
    archivo_eans = input("üìÅ Ingresa la ruta del archivo .txt con c√≥digos EAN: ").strip()
    if not archivo_eans:
        archivo_eans = "codigosean.txt"  # Archivo por defecto en el directorio actual
    
    downloads_path = os.path.expanduser("~/Downloads")
    
    # Generar nombres de archivos con timestamp
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    excel_filename = f"productos_goupc_{timestamp}.xlsx"
    json_filename = f"productos_goupc_{timestamp}.json"
    
    excel_path = os.path.join(downloads_path, excel_filename)
    json_path = os.path.join(downloads_path, json_filename)
    
    print(f"üìÅ Archivo de c√≥digos: {archivo_eans}")
    print(f"üíæ Excel de salida: {excel_path}")
    print(f"üìÑ JSON de salida: {json_path}")
    print()
    
    # Verificar que existe el archivo de c√≥digos
    if not os.path.exists(archivo_eans):
        print(f"‚ùå Error: No se encontr√≥ el archivo {archivo_eans}")
        return False
    
    try:
        # 1. Leer c√≥digos EAN desde archivo
        print("üìñ PASO 1: Leyendo c√≥digos EAN...")
        codigos = leer_codigos_desde_archivo(archivo_eans)
        
        if not codigos:
            print("‚ùå No se encontraron c√≥digos v√°lidos en el archivo")
            return False
        
        print(f"‚úÖ {len(codigos)} c√≥digos EAN le√≠dos correctamente")
        print("C√≥digos encontrados:", codigos[:5], "..." if len(codigos) > 5 else "")
        print()
        
        # 2. Procesar c√≥digos con GO-UPC API (con reintentos y IA)
        print("üîç PASO 2: Consultando GO-UPC API con reintentos y completado con IA...")
        resultados = procesar_codigos_con_reintentos(codigos)
        
        if not resultados:
            print("‚ùå No se obtuvieron resultados")
            return False
        
        # 3. Mostrar estad√≠sticas
        print("\nüìä ESTAD√çSTICAS:")
        print("-" * 40)
        encontrados = len([r for r in resultados if r.get('producto_encontrado')])
        errores = len([r for r in resultados if r.get('error')])
        completados_ia = len([r for r in resultados if r.get('datos_completados_ia')])
        reintentos = len([r for r in resultados if r.get('intentos', 1) > 1])
        
        print(f"Total procesados: {len(resultados)}")
        print(f"Productos encontrados: {encontrados}")
        print(f"No encontrados: {len(resultados) - encontrados}")
        print(f"Errores: {errores}")
        print(f"Completados con IA: {completados_ia}")
        print(f"Reintentos realizados: {reintentos}")
        print(f"Tasa de √©xito: {(encontrados/len(resultados)*100):.1f}%")
        
        # 4. Mostrar algunos productos encontrados
        productos_encontrados = [r for r in resultados if r.get('producto_encontrado')]
        if productos_encontrados:
            print(f"\nüéØ PRODUCTOS ENCONTRADOS (primeros {min(3, len(productos_encontrados))}):")
            print("-" * 50)
            for i, producto in enumerate(productos_encontrados[:3], 1):
                print(f"{i}. {producto.get('nombre_producto', 'N/A')}")
                print(f"   Marca: {producto.get('marca', 'N/A')}")
                print(f"   Categor√≠a: {producto.get('categoria', 'N/A')}")
                print()
        
        # 5. Guardar resultados en Excel
        print("üíæ PASO 3: Generando archivo Excel...")
        guardar_excel_goupc(resultados, excel_path)
        
        # 6. Guardar respaldo en JSON
        print("üìÑ PASO 4: Generando respaldo JSON...")
        guardar_json(resultados, json_path)
        
        # 7. Resumen final
        print("\nüéâ PROCESAMIENTO COMPLETADO")
        print("=" * 60)
        print(f"‚úÖ Archivo Excel: {excel_path}")
        print(f"‚úÖ Archivo JSON: {json_path}")
        print(f"üìä {encontrados}/{len(resultados)} productos con informaci√≥n completa")
        
        # Informaci√≥n sobre el Excel generado
        print(f"\nüìã El archivo Excel contiene:")
        print(f"   ‚Ä¢ Hoja 'Productos GO-UPC': Informaci√≥n principal con datos de IA")
        print(f"   ‚Ä¢ Hoja 'Especificaciones': Detalles t√©cnicos")
        print(f"   ‚Ä¢ {len(resultados)} filas de datos")
        print(f"   ‚Ä¢ Informaci√≥n completa de GO-UPC API")
        print(f"   ‚Ä¢ Datos completados con IA: {completados_ia} productos")
        print(f"   ‚Ä¢ Informaci√≥n de reintentos y errores")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Error durante el procesamiento: {e}")
        return False

if __name__ == "__main__":
    success = main()
    
    if success:
        print(f"\nüöÄ ¬°Listo! Revisa tu carpeta de Descargas para ver los archivos generados.")
    else:
        print(f"\n‚ö†Ô∏è El procesamiento no se complet√≥ correctamente.")
    
    input("\nPresiona Enter para cerrar...") 